import streamlit as st
import requests

st.set_page_config(page_title="Projects ‚Äì √âp√≠tAI", layout="wide")

st.title("üìÅ Projektek")

st.write("Itt tudod kezelni az aktu√°lis projekteket.")


@st.cache_data(show_spinner=False)
def geocode_location(name: str):
    """Return (lat, lon) for a location name using OpenStreetMap Nominatim."""
    try:
        resp = requests.get(
            "https://nominatim.openstreetmap.org/search",
            params={"q": name, "format": "json", "limit": 1},
            headers={"User-Agent": "epit-ai/1.0"},
            timeout=5,
        )
        resp.raise_for_status()
        results = resp.json()
        if results:
            return float(results[0]["lat"]), float(results[0]["lon"])
    except Exception:
        pass
    return None


def get_default_phases_markdown() -> str:
    return (
        "1. Szerz≈ëd√©sk√∂t√©s\n"
        "   - √úgyf√©l ig√©nyfelm√©r√©s\n"
        "   - Aj√°nlatad√°s\n"
        "   - Szerz≈ëd√©s meg√≠r√°sa, kik√ºld√©se\n"
        "   - Enged√©lyek, biztos√≠t√°sok\n"
        "     - [AI] Szerz≈ëd√©s sablonok, automatikus kit√∂lt√©s\n"
        "\n"
        "2. Tervez√©s\n"
        "   - √âp√≠t√©szeti tervek\n"
        "   - Statikai, g√©p√©szeti, elektromos tervek\n"
        "   - Enged√©lyek bead√°sa\n"
        "   - K√∂lts√©gvet√©s, √ºtemterv\n"
        "\n"
        "3. Anyag- √©s er≈ëforr√°s-tervez√©s\n"
        "   - Anyagok list√°z√°sa\n"
        "   - Aj√°nlatk√©r√©sek kik√ºld√©se\n"
        "   - Besz√°ll√≠t√≥k kiv√°laszt√°sa\n"
        "   - Munkaer≈ë √©s alv√°llalkoz√≥k √ºtemez√©se\n"
        "     - [AI] Aj√°nlatk√©r√©s e-mailben + v√°laszok feldolgoz√°sa\n"
        "\n"
        "4. Kivitelez√©s\n"
        "   - Alapoz√°s, f√∂ldmunka\n"
        "   - Falazat, szerkezet√©p√≠t√©s\n"
        "   - Tet≈ë, ny√≠l√°sz√°r√≥k\n"
        "   - G√©p√©szet, villanyszerel√©s\n"
        "   - Vakol√°s, burkol√°s, fest√©s\n"
        "   - [AI] Er≈ëforr√°s √ºtemez√©s (id≈ëj√°r√°s + ember + eszk√∂z)\n"
        "\n"
        "5. M≈±szaki √°tad√°s\n"
        "   - Ellen≈ërz√©s, m≈±szaki vezet≈ë\n"
        "   - Hibajegyz√©k k√©sz√≠t√©se\n"
        "   - Haszn√°latbav√©teli enged√©ly\n"
        "   - [AI] Checklist + hibajegyz√©k automatikus gener√°l√°s\n"
        "\n"
        "6. Projekt lez√°r√°s\n"
        "   - P√©nz√ºgyi elsz√°mol√°s\n"
        "   - Kulcs√°tad√°s\n"
        "   - Garanci√°lis id≈ëszak indul\n"
    )

# Simple in-memory store in session
if "projects" not in st.session_state:
    st.session_state.projects = []
if "selected_project_index" not in st.session_state:
    st.session_state.selected_project_index = None
if "resources" not in st.session_state:
    st.session_state.resources = [
        {"T√≠pus": "Alkalmazott", "N√©v": "Kiss J√°nos", "Poz√≠ci√≥": "K≈ëm≈±ves"},
        {"T√≠pus": "Alv√°llalkoz√≥", "N√©v": "Ac√©l Kft.", "Poz√≠ci√≥": "Vasszerkezetek"},
    ]

selected_index = st.session_state.selected_project_index

# If a project is selected, show its details view
if selected_index is not None and 0 <= selected_index < len(st.session_state.projects):
    project = st.session_state.projects[selected_index]

    st.subheader(project["name"])

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("√Ållapot", project.get("status", "Ismeretlen"))
    with col2:
        st.metric("Kezd√©s", project.get("start", "-"))
    with col3:
        st.metric("Befejez√©s", project.get("end", "-"))

    st.write("### Halad√°s")
    st.progress(int(project.get("progress", 0)))

    st.write("### Dolgoz√≥k a projekten")
    st.write(", ".join(project.get("members", [])) or "N/A")

    st.write("### F√°zisok")
    st.markdown(get_default_phases_markdown())

    st.write("### Helysz√≠nek")
    locations = project.get("locations", [])
    st.write(", ".join(locations) or "N/A")

    # Map for locations
    points = []
    for loc in locations:
        coords = geocode_location(loc)
        if coords:
            points.append({"lat": coords[0], "lon": coords[1]})
    if points:
        st.map(points)

    if st.button("‚¨ÖÔ∏è Vissza a list√°hoz"):
        st.session_state.selected_project_index = None
        st.rerun()

# Otherwise show creation form and list
else:
    with st.form("create_project"):
        st.subheader("√öj projekt l√©trehoz√°sa")
        name = st.text_input("Projekt neve")
        start = st.date_input("Kezd√©s d√°tuma")
        end = st.date_input("Befejez√©s d√°tuma")
        locations_input = st.text_input("Helysz√≠nek (vessz≈ëvel elv√°lasztva)")
        resource_names = [r.get("N√©v", "") for r in st.session_state.resources if r.get("N√©v")]
        selected_members = st.multiselect("Projekt tagok", options=resource_names, default=[])
        submitted = st.form_submit_button("Projekt hozz√°ad√°sa")
        if submitted and name:
            locations_list = [
                part.strip() for part in (locations_input or "").split(",") if part.strip()
            ] or ["Budapest"]
            st.session_state.projects.append({
                "name": name,
                "start": str(start),
                "end": str(end),
                "status": "Folyamatban",
                "members": selected_members,
                "locations": locations_list,
                "progress": 35
            })
            st.success(f"Projekt l√©trehozva: {name}")
            st.rerun()

    st.write("### Folyamatban l√©v≈ë projektek")

    if st.session_state.projects:
        header = st.columns([3, 2, 2, 2, 2])
        header[0].markdown("**N√©v**")
        header[1].markdown("**Kezd√©s**")
        header[2].markdown("**Befejez√©s**")
        header[3].markdown("**St√°tusz**")
        header[4].markdown("**M≈±velet**")

        for idx, proj in enumerate(st.session_state.projects):
            cols = st.columns([3, 2, 2, 2, 2])
            cols[0].markdown(f"**{proj['name']}**")
            cols[1].write(proj["start"])
            cols[2].write(proj["end"])
            cols[3].write(proj["status"])
            if cols[4].button("Megnyit√°s", key=f"open_{idx}"):
                st.session_state.selected_project_index = idx
                st.rerun()
    else:
        st.info("M√©g nincs projekt. Hozz l√©tre egyet fentebb.")
