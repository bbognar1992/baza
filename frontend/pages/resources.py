import streamlit as st
from default_data import ensure_base_session_state
from components.sidebar import render_sidebar_navigation, handle_user_not_logged_in

st.set_page_config(page_title="Resources ‚Äì Pontum", layout="wide")

# Initialize session state
ensure_base_session_state(st)

# Check if user is logged in
handle_user_not_logged_in()

# Render sidebar navigation
render_sidebar_navigation()

st.title("üõ†Ô∏è Er≈ëforr√°sok")

st.write("Itt tudod kezelni az alkalmazottakat √©s az alv√°llalkoz√≥kat.")

with st.expander("‚ûï √öj er≈ëforr√°s"):
    resource_type = st.selectbox(
        "T√≠pus",
        ["Alkalmazott", "Alv√°llalkoz√≥", "Besz√°ll√≠t√≥"],
        key="resource_type"
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        name_label = "N√©v" if resource_type == "Alkalmazott" else "C√©g neve"
        name = st.text_input(name_label, key="resource_name")
        
        if resource_type == "Alkalmazott":
            detail_label = "Poz√≠ci√≥"
        elif resource_type == "Alv√°llalkoz√≥":
            detail_label = "El√©rhet≈ës√©g"
        else:  # Besz√°ll√≠t√≥
            detail_label = "Term√©k / szakter√ºlet"
        
        detail = st.text_input(detail_label, key="resource_detail")
        
        phone = st.text_input("Telefonsz√°m", key="resource_phone")
        email = st.text_input("E-mail", key="resource_email")
    
    with col2:
        address = st.text_area("C√≠m", key="resource_address")
        skills = st.text_area("K√©szs√©gek / Szakter√ºletek", key="resource_skills")
        
        if resource_type == "Alkalmazott":
            hourly_rate = st.number_input("√ìrab√©r (Ft)", min_value=0.0, key="resource_hourly_rate")
            experience = st.number_input("Tapasztalat (√©v)", min_value=0, max_value=50, key="resource_experience")
        else:
            hourly_rate = 0
            experience = 0
        
        availability = st.selectbox(
            "El√©rhet≈ës√©g",
            ["El√©rhet≈ë", "Foglalt", "Szabads√°gon", "Betegszabads√°g"],
            key="resource_availability"
        )
    
    if st.button("Hozz√°ad√°s", key="add_resource"):
        if name:
            new_resource = {
                "T√≠pus": resource_type, 
                "N√©v": name, 
                "Poz√≠ci√≥": detail or "-",
                "Telefonsz√°m": phone or "",
                "E-mail": email or "",
                "C√≠m": address or "",
                "K√©szs√©gek": skills or "",
                "√ìrab√©r": hourly_rate,
                "El√©rhet≈ës√©g": availability,
                "Tapasztalat": experience
            }
            st.session_state.resources.append(new_resource)
            st.success(f"{resource_type} hozz√°adva: {name}")
            st.rerun()
        else:
            st.error("A n√©v megad√°sa k√∂telez≈ë!")


st.write("### Aktu√°lis er≈ëforr√°sok")

# Split resources by type
emps = [r for r in st.session_state.resources if r.get("T√≠pus") == "Alkalmazott"]
subs = [r for r in st.session_state.resources if r.get("T√≠pus") == "Alv√°llalkoz√≥"]
sups = [r for r in st.session_state.resources if r.get("T√≠pus") == "Besz√°ll√≠t√≥"]

tab1, tab2, tab3 = st.tabs([
    f"Alkalmazott ({len(emps)})",
    f"Alv√°llalkoz√≥ ({len(subs)})",
    f"Besz√°ll√≠t√≥ ({len(sups)})",
])

def render_resource_list(resources_subset, subset_key_prefix=""):
    if not resources_subset:
        st.info("Nincs megjelen√≠thet≈ë er≈ëforr√°s.")
        return
    
    header = st.columns([3, 2, 2, 2, 2, 2])
    header[0].markdown("**N√©v**")
    header[1].markdown("**Poz√≠ci√≥**")
    header[2].markdown("**El√©rhet≈ës√©g**")
    header[3].markdown("**Tapasztalat**")
    header[4].markdown("**√ìrab√©r**")
    header[5].markdown("**M≈±velet**")
    
    for idx, resource in enumerate(resources_subset):
        cols = st.columns([3, 2, 2, 2, 2, 2])
        
        # Add icon based on resource type
        icon = "üë§" if resource.get("T√≠pus") == "Alkalmazott" else "üè¢" if resource.get("T√≠pus") == "Alv√°llalkoz√≥" else "üì¶"
        cols[0].markdown(f"**{icon} {resource.get('N√©v', 'N√©vtelen')}**")
        cols[1].write(resource.get('Poz√≠ci√≥', '-'))
        cols[2].write(resource.get('El√©rhet≈ës√©g', 'El√©rhet≈ë'))
        
        experience = resource.get('Tapasztalat', 0)
        cols[3].write(f"{experience} √©v" if experience > 0 else "-")
        
        hourly_rate = resource.get('√ìrab√©r', 0)
        cols[4].write(f"{hourly_rate:,.0f} Ft" if hourly_rate > 0 else "-")
        
        # Find original index to open details
        try:
            original_idx = st.session_state.resources.index(resource)
        except ValueError:
            original_idx = None
        
        if cols[5].button("Megnyit√°s", key=f"open_{subset_key_prefix}{idx}"):
            if original_idx is not None:
                st.session_state.selected_resource_index = original_idx
                st.switch_page("pages/resource_details.py")

with tab1:
    render_resource_list(emps, "emp_")

with tab2:
    render_resource_list(subs, "sub_")

with tab3:
    render_resource_list(sups, "sup_")