import streamlit as st
from default_data import ensure_base_session_state, get_default_profession_types
from components.sidebar import render_sidebar_navigation, handle_user_not_logged_in

st.set_page_config(page_title="Szakma t√≠pusok ‚Äì √âp√≠tAI", layout="wide")

# Initialize session state
ensure_base_session_state(st)

# Check if user is logged in
handle_user_not_logged_in()

# Render sidebar navigation
render_sidebar_navigation()

st.title("üîß Szakma t√≠pusok")
st.write("Hozz l√©tre √©s kezeld a szakma t√≠pusokat.")

# Profession types are now handled by ensure_base_session_state

if "selected_profession_type_index" not in st.session_state:
    st.session_state.selected_profession_type_index = None

with st.expander("‚ûï √öj szakma t√≠pus hozz√°ad√°sa", expanded=False):
    col1, col2, col3 = st.columns(3)
    with col1:
        t_name = st.text_input("Szakma neve", key="szakma_name")
    with col2:
        t_desc = st.text_input("Le√≠r√°s", key="szakma_desc")
    with col3:
        t_level = st.selectbox("Szint", ["Szakmunk√°s", "Vezet≈ë", "Szak√©rt≈ë"], key="szakma_level")
    
    if st.button("Hozz√°ad√°s", key="szakma_add"):
        if t_name:
            # prevent duplicate by name
            if any(st.get("N√©v") == t_name for st in st.session_state.profession_types):
                st.warning("Ilyen nev≈± szakma m√°r l√©tezik.")
            else:
                st.session_state.profession_types.append({
                    "N√©v": t_name, 
                    "Le√≠r√°s": t_desc or "-",
                    "Szint": t_level
                })
                st.success(f"Szakma t√≠pus hozz√°adva: {t_name}")
                st.rerun()

selected_index = st.session_state.selected_profession_type_index

if selected_index is not None and 0 <= selected_index < len(st.session_state.profession_types):
    profession = st.session_state.profession_types[selected_index]
    st.subheader(profession.get("N√©v", "-"))
    
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**Le√≠r√°s:** {profession.get('Le√≠r√°s', '-')}")
    with col2:
        st.write(f"**Szint:** {profession.get('Szint', '-')}")
    
    # Editable fields
    st.write("### Szerkeszt√©s")
    new_name = st.text_input("Szakma neve", value=profession.get("N√©v", ""), key=f"edit_szakma_name_{selected_index}")
    new_desc = st.text_input("Le√≠r√°s", value=profession.get("Le√≠r√°s", ""), key=f"edit_szakma_desc_{selected_index}")
    new_level = st.selectbox("Szint", ["Szakmunk√°s", "Vezet≈ë", "Szak√©rt≈ë"], 
                           index=["Szakmunk√°s", "Vezet≈ë", "Szak√©rt≈ë"].index(profession.get("Szint", "Szakmunk√°s")),
                           key=f"edit_szakma_level_{selected_index}")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ Ment√©s", key=f"save_szakma_{selected_index}"):
            profession["N√©v"] = new_name
            profession["Le√≠r√°s"] = new_desc
            profession["Szint"] = new_level
            st.success("Szakma t√≠pus friss√≠tve!")
            st.rerun()
    
    with col2:
        if st.button("‚¨ÖÔ∏è Vissza a list√°hoz"):
            st.session_state.selected_profession_type_index = None
            st.rerun()
else:
    st.write("### El√©rhet≈ë szakma t√≠pusok")
    if st.session_state.profession_types:
        # Filter options
        col1, col2 = st.columns([3, 1])
        with col1:
            search_term = st.text_input("üîç Keres√©s n√©v alapj√°n", key="szakma_search")
        with col2:
            level_filter = st.selectbox("Szint sz≈±r≈ë", ["√ñsszes", "Szakmunk√°s", "Vezet≈ë", "Szak√©rt≈ë"], key="szakma_filter")
        
        # Filter the list
        filtered_profession = st.session_state.profession_types
        if search_term:
            filtered_profession = [s for s in filtered_profession if search_term.lower() in s.get("N√©v", "").lower()]
        if level_filter != "√ñsszes":
            filtered_profession = [s for s in filtered_profession if s.get("Szint") == level_filter]
        
        # Display filtered results
        if filtered_profession:
            header = st.columns([3, 4, 2, 2, 1])
            header[0].markdown("**N√©v**")
            header[1].markdown("**Le√≠r√°s**")
            header[2].markdown("**Szint**")
            header[3].markdown("**M≈±velet**")
            header[4].markdown("")
            
            for idx, profession in enumerate(filtered_profession):
                # Find original index for operations
                original_idx = st.session_state.profession_types.index(profession)
                
                cols = st.columns([3, 4, 2, 2, 1])
                cols[0].markdown(f"**{profession.get('N√©v','-')}**")
                cols[1].write(profession.get("Le√≠r√°s", "-"))
                
                # Color code the level
                level = profession.get("Szint", "-")
                if level == "Vezet≈ë":
                    cols[2].markdown(f"<span style='color: orange; font-weight: bold;'>{level}</span>", unsafe_allow_html=True)
                elif level == "Szak√©rt≈ë":
                    cols[2].markdown(f"<span style='color: red; font-weight: bold;'>{level}</span>", unsafe_allow_html=True)
                else:
                    cols[2].write(level)
                
                if cols[3].button("Megnyit√°s", key=f"open_szakma_{original_idx}"):
                    st.session_state.selected_profession_type_index = original_idx
                    st.rerun()
                if cols[4].button("‚ùå", key=f"del_szakma_{original_idx}"):
                    st.session_state.profession_types.pop(original_idx)
                    st.rerun()
        else:
            st.info("Nincs tal√°lat a megadott sz≈±r≈ëkkel.")
    else:
        st.info("Nincs szakma t√≠pus. Adj hozz√° fentebb.")

# Statistics
if st.session_state.profession_types:
    st.write("### Statisztik√°k")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        total_count = len(st.session_state.profession_types)
        st.metric("√ñsszes szakma t√≠pus", total_count)
    
    with col2:
        worker_count = len([s for s in st.session_state.profession_types if s.get("Szint") == "Szakmunk√°s"])
        st.metric("Szakmunk√°sok", worker_count)
    
    with col3:
        leader_count = len([s for s in st.session_state.profession_types if s.get("Szint") in ["Vezet≈ë", "Szak√©rt≈ë"]])
        st.metric("Vezet≈ëk/Szak√©rt≈ëk", leader_count)
